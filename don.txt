Title: 

Decentralized Optimization Network (DON)

1. Abstract:

The proposed system replaces the original Proof of Work (PoW) consensus mechanism used in Bitcoin by 
using a weighted sum of efficiency increments from multiple models within the network to control block 
time. By dynamically adjusting weights based on supply and demand factors, the system aims to create 
a blockchain platform with an adjustable block time based on optimization work rather than 
cryptographical work. 

This system restrict the optimizable models to the ones that have synthetic data generators available,
since snythetic data generators are used in nodes of the descentralized network to validate reported 
optima while avoiding overfitting. 

The Key Components of the system are the efficiency metrics in which each participating models compute 
their efficiency metric, a weighted sum calculation that uses a Game Theory approach to 
calculate weight adjustments is used, with factors influencing weights including download frequency (that 
produced an optimum), aproximate computational capacity used in each model's optimization, frequency 
of new optimums and other factors. The weights represent the relative importance due to their supply 
and demand of the models’s improvement.

Stakeholders, such as optimizers, evaluators, clients and communication/storage nodes contribute to 
the network’s efficiency by improving models and validating their performance. To incentivize their 
participation, a novel form of cryptocurrency is introduced. Similar to Bitcoin’s coinbase transaction, 
this cryptocurrency is generated with each block. The weights assigned to stakeholders determine 
their share of this newly minted coin. Additionally, the block not only stores evaluation and 
optimization requests but also records transfers of the new coin among participants. 

By aligning incentives through this weighted reward system, the network fosters collaboration, 
efficiency, and continuous improvement.

2. Introduction
flowchart TD

3. Objectives and Scope

4. Theoretical framework

4.1 State of the art
4.1.1 Useful Proofs of Work
4.1.2 Synthetic data generation

4.2 Optima descentralized validation scheme formal demonstration

4.3 Stakeholder fee distribution formal demonstration
The stakeholders are: optimizers, evaluators (also do validation of optimuma), nodes(transport/store), and clients that send evaluations to the network to be evaluated with real data, these requests are stored as pending on the nodes until an evaluator solves them using latest optima found by optimizers.

5. Methodology

For this methodology, at least 3 different synthetic data generators must be available and will be used to generate the requirements, tests and implementation of the project.

The steps in sections 5.1 to 5.5 were used during design and implementation of the system required to fullfill the proposed objectives and scope.
5.1 Get user requirements, design module diagram and acceptation tests for these requirements (section 6).
5.2 Get application requirements, design allocation diagram and system tests (section 7).
5.3 Perform modular design, create component-connector diagram and integration tests (section 8).
5.4 Perform individual module design, module logic diagram and unit tests (section 9).
5.5 Implement modules to pass all unit, integration, system and acceptation tests, in the aforementioned order.

6. User requirements

This section documents the process of defining the expected system functionality and features (section 6.1), producing 
tests to be passed by the system implementation (section 6.2) and the design of the software architecture of such system
starting with the identification of components and relations in a module diagram that will be the base of the 
design (section 6.3), being complemented in following sections with the allocation, component-connector and 
module logic diagrams. 

6.1 Requirement descriptions

The requirements from the point of view of the user that interacts with the software are documented in sections 6.1.1 to 
6.1.9, these are high level descriptions of how the software will be used.

6.2 Acceptance Tests
Sections 6.2.1 to 6.2.10 show the acceptance test objective, procedure and acceptance criteria for each user requirement 
from section 6.1

6.3 Module Diagram Description
The module diagram for the system considers the specific needs of different user groups (traders and optimizers) and
decomposes complex functionalities into manageable microservices. The architecture emphasizes security, scalability, 
and clear data flow. 

6.3.1 Modules in Each Layer
Presentation Layer Modules:

6.3.2 Connections and Information Flow Between Modules

7. Aplication Requirements, System Tests and Allocation Diagram.

7.1. Aplication Requirements
This section outlines detailed and specific application requirements crucial for the system. Each requirement is designed to provide clear, measurable criteria for system development, addressing core technical aspects like algorithm accuracy, security, data management, scalability, and performance. The section now includes detailed descriptions and metrics, ensuring that the requirements are actionable and understandable for all stakeholders. This structured approach ensures that the system's technical foundation is robust and aligns with the project's goals and user needs.

7.2 System Tests
This section describes system tests for each application requirement. The tests now include specific objectives, procedures, quantitative acceptance criteria, designated test environments, and tools to be used. These enhancements ensure a more thorough and measurable evaluation of the system’s capabilities, addressing both technical robustness and user-centric performance.

7.3 Allocation Diagram 
The following description is provided to facilitate a thorough understanding of the system's deployment and environment-resource interaction.

8. Modular Design,  Component-Connector Diagram and Integration tests 

8.1 Modular Design
This modular design provides a more detailed and technically rich picture of the Synthetic Data Generator system. It encompasses specific data formats, communication protocols, error handling, performance considerations, and security measures, offering a robust framework for development and integration testing.

8.2 Integration Tests
This plan will include detailed test cases, specific performance metrics, enhanced coverage of negative and edge cases, explicit testing of external system integrations, broader security testing, clearer integration into CI/CD pipelines, and structured documentation and reporting.

8.3 Component-Connector Diagram
The Component-Connector Diagram is designed to offer a comprehensive and clear representation of the system's architecture, focusing on the interactions between various components and connectors. It is organized to clearly depict data flow, module interactions, and system scalability.
The updated Component-Connector Diagram is a dynamic, informative, and user-friendly tool. It integrates color coding for clear group delineation, standardized shapes for components, well-defined connectors with annotations, interactive elements, and accessibility considerations.

9. Individual module design

This section documents the individual module design for each component, module logic diagrams and unit tests.

9.1 Module Logic Diagrams


10. Implementation

10.1 Components

10.2 Integration?

10.3 System? 

10.1 Application?




