swagger: '2.0'
info:
  title: DataLogger
  description: 'Configurable structure, configurable storage, generic data-logger API.'
  version: '0.01'
  termsOfService: MIT
host: 'localhost:5000'
schemes:
  - http
securityDefinitions:
  basic_auth:
    type: basic
    description: >-
      Basic auth, please add the following line to the yaml: x-basicInfoFunc:
      controllers.authentication.basic_auth.authenticate
    x-basicInfoFunc: controllers.authentication.basic_auth.authenticate
definitions:
  input_user:
    type: object
    properties:
      username:
        type: string
      email:
        type: string
      password:
        type: string
      admin:
        type: boolean
    required:
      - username
      - email
      - password
      - admin
  output_user:
    type: object
    properties:
      id:
        type: integer
      username:
        type: string
      email:
        type: string
      is_admin:
        type: boolean
    required:
      - id
      - username
      - email
      - is_admin
  table:
    type: object
    properties:
      name:
        type: string
      real_name:
        type: string
      columns:
        type: array
        items:
          $ref: '#/definitions/table_column'
          type:
            - null
  output_process:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
      user_id:
        type: integer
      tables:
        type: array
        items:
          $ref: '#/definitions/table'
          type:
            - null
    required:
      - id
      - name
      - user_id
  input_authorization:
    type: object
    properties:
      user_id:
        type: integer
        default: '0'
      process_id:
        type: integer
        default: '0'
      table:
        type: string
        default: '""'
      read_all:
        type: boolean
      read:
        type: boolean
      create:
        type: boolean
      update:
        type: boolean
      table_crud:
        type: boolean
      process_crud:
        type: boolean
      delete:
        type: boolean
      priority:
        type: integer
        default: '0'
        minimum: 0
        maximum: 1000
  input_log:
    type: object
    properties:
      user_id:
        type: integer
      process_id:
        type: integer
      table:
        type: string
      route:
        type: string
      method:
        type: string
      parameters:
        type: object
      result:
        type: object
      body:
        type: object
      result_code:
        type: integer
    required:
      - user_id
      - route
      - method
  input_process_register:
    type: object
    properties:
      process_id:
        type: integer
      table:
        type: string
      filter_column:
        type: string
      filter_value:
        type: string
      values:
        type: object
    required:
      - process_id
      - table
  table_column:
    type: object
    properties:
      name:
        type: string
      col_type:
        type: string
      index:
        type: boolean
        default: false
      unique:
        type: boolean
        default: false
      primary_key:
        type: boolean
        default: false
      foreign_key:
        type: string
        default: none
      default:
        type: object
      nullable:
        type: boolean
        default: false
    required:
      - name
      - col_type
  input_process_table:
    type: object
    properties:
      process_id:
        type: integer
      columns:
        type: array
        items:
          $ref: '#/definitions/table_column'
          type:
            - null
      name:
        type: string
    required:
      - process_id
      - columns
      - name
  process_operation:
    type: object
    properties:
      process:
        $ref: '#/definitions/input_process'
        type: null
      table:
        $ref: '#/definitions/input_process_table'
        type: null
      register:
        $ref: '#/definitions/input_process_register'
        type: null
  output_process_register:
    type: array
    items:
      type:
        - object
  output_process_table:
    type: object
    properties:
      process_id:
        type: integer
      name:
        type: string
      table:
        $ref: '#/definitions/table'
        type: null
    required:
      - process_id
      - name
      - table
  input_process:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
      user_id:
        type: integer
      tables:
        type: array
        items:
          $ref: '#/definitions/table'
          type:
            - null
  process_operation_output:
    type: object
    properties:
      process:
        $ref: '#/definitions/input_process'
        type: null
      table:
        $ref: '#/definitions/input_process_table'
        type: null
      register:
        $ref: '#/definitions/input_process_register'
        type: null
  output_authorization:
    type: object
    properties:
      user_id:
        type: integer
        default: '0'
      process_id:
        type: integer
        default: '0'
      table:
        type: string
        default: '""'
      read_all:
        type: boolean
      read:
        type: boolean
      create:
        type: boolean
      update:
        type: boolean
      table_crud:
        type: boolean
      process_crud:
        type: boolean
      delete:
        type: boolean
      priority:
        type: integer
        default: '0'
        minimum: 0
        maximum: 1000
      id:
        type: integer
    required:
      - id
  output_log:
    type: object
    properties:
      user_id:
        type: integer
      process_id:
        type: integer
      table:
        type: string
      route:
        type: string
      method:
        type: string
      parameters:
        type: string
      result:
        type: object
      body:
        type: object
      id:
        type: integer
      result_code:
        type: integer
    required:
      - user_id
      - route
      - method
      - id
responses:
  'trait:error-response:400':
    schema:
      type: object
      properties:
        errCode:
          type: integer
        message:
          type: string
      required:
        - errCode
        - message
    description: Bad Request.
  'trait:error-response:401':
    schema:
      type: object
      properties:
        errCode:
          type: integer
        message:
          type: string
      required:
        - errCode
        - message
    description: Unauthorized
  'trait:error-response:403':
    schema:
      type: object
      properties:
        errCode:
          type: integer
        message:
          type: string
      required:
        - errCode
        - message
    description: Forbidden
  'trait:error-response:404':
    schema:
      type: object
      properties:
        errCode:
          type: integer
        message:
          type: string
      required:
        - errCode
        - message
    description: Not Found
parameters: {}
paths:
  /users:
    post:
      tags:
        - user
        - create
      summary: Create user
      description: Create user
      consumes: []
      produces: []
      schemes: []
      security:
        - basic_auth: []
      operationId: controllers.user.create
      responses:
        '200':
          schema:
            $ref: '#/definitions/output_user'
          description: Returns response 200 with the details of the newly created user
        '400':
          $ref: '#/responses/trait:error-response:400'
        '401':
          $ref: '#/responses/trait:error-response:401'
        '403':
          $ref: '#/responses/trait:error-response:403'
        '404':
          $ref: '#/responses/trait:error-response:404'
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/input_user'
    get:
      tags:
        - user
        - list
      summary: Get list of users
      description: Get list of users
      consumes: []
      produces: []
      schemes: []
      security:
        - basic_auth: []
      operationId: controllers.user.read_all
      responses:
        '200':
          schema:
            type: array
            items:
              $ref: '#/definitions/output_user'
          description: Returns 200 with list/array of users
        '400':
          $ref: '#/responses/trait:error-response:400'
        '401':
          $ref: '#/responses/trait:error-response:401'
        '403':
          $ref: '#/responses/trait:error-response:403'
        '404':
          $ref: '#/responses/trait:error-response:404'
      parameters: []
  '/users/{userId}':
    get:
      tags:
        - user
        - get
      summary: Get detail of user by userId
      description: Get detail of user by userId
      consumes: []
      produces: []
      schemes: []
      security:
        - basic_auth: []
      operationId: controllers.user.read
      responses:
        '200':
          schema:
            $ref: '#/definitions/output_user'
          description: Returns 200 with the detail of user for the specified userId
        '400':
          $ref: '#/responses/trait:error-response:400'
        '401':
          $ref: '#/responses/trait:error-response:401'
        '403':
          $ref: '#/responses/trait:error-response:403'
        '404':
          $ref: '#/responses/trait:error-response:404'
      parameters:
        - name: userId
          in: path
          description: ''
          required: true
          type: integer
    put:
      tags:
        - user
        - update
      summary: Update user details by userId
      description: Update user details by userId
      consumes: []
      produces: []
      schemes: []
      security:
        - basic_auth: []
      operationId: controllers.user.update
      responses:
        '200':
          schema:
            $ref: '#/definitions/output_user'
          description: Returns 200 with the detail of updated user
        '400':
          $ref: '#/responses/trait:error-response:400'
        '401':
          $ref: '#/responses/trait:error-response:401'
        '403':
          $ref: '#/responses/trait:error-response:403'
        '404':
          $ref: '#/responses/trait:error-response:404'
      parameters:
        - name: userId
          in: path
          description: ''
          required: true
          type: string
        - name: body
          in: body
          schema:
            $ref: '#/definitions/input_user'
    delete:
      tags:
        - user
        - delete
      summary: Delete user by userId
      description: Delete user by userId
      consumes: []
      produces: []
      schemes: []
      security:
        - basic_auth: []
      operationId: controllers.user.delete
      responses:
        '200':
          schema:
            type: object
          description: Returns 200
        '400':
          $ref: '#/responses/trait:error-response:400'
        '401':
          $ref: '#/responses/trait:error-response:401'
        '403':
          $ref: '#/responses/trait:error-response:403'
        '404':
          $ref: '#/responses/trait:error-response:404'
      parameters:
        - name: userId
          in: path
          description: ''
          required: true
          type: integer
        - name: body
          in: body
          schema:
            type: object
  /process:
    post:
      tags:
        - process
        - create
      summary: Create process
      description: >-
        Create process, a table for a process or a register inside a table of a
        process, depending on the body parameters. (process, table or register)
      consumes: []
      produces: []
      schemes: []
      security:
        - basic_auth: []
      operationId: controllers.process.create.create
      responses:
        '200':
          schema:
            $ref: '#/definitions/output_process_register'
          description: >-
            Returns response 200 with the details of the newly created register
            in a process table
        '201':
          schema:
            $ref: '#/definitions/process_operation_output'
          description: Returns response 201 with the details of the newly created process
        '202':
          schema:
            $ref: '#/definitions/output_process_table'
          description: >-
            Returns response 201 with the details of the newly created table for
            a process
        '400':
          $ref: '#/responses/trait:error-response:400'
        '401':
          $ref: '#/responses/trait:error-response:401'
        '403':
          $ref: '#/responses/trait:error-response:403'
        '404':
          $ref: '#/responses/trait:error-response:404'
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/process_operation'
    get:
      tags:
        - process
        - list
      summary: Get list of process
      description: >-
        Get list of processes, or a list of registers of a table of a process,
        depending on the existence of the table query parameter.
      consumes: []
      produces: []
      schemes: []
      security:
        - basic_auth: []
      operationId: controllers.process.read_all.read_all
      responses:
        '200':
          schema:
            type: array
            items:
              $ref: '#/definitions/output_process'
          description: Returns 200 with list/array of processs
        '203':
          schema:
            type: array
            items:
              $ref: '#/definitions/output_process_register'
          description: Returns 203 with list/array of registers of the selected table
        '400':
          $ref: '#/responses/trait:error-response:400'
        '401':
          $ref: '#/responses/trait:error-response:401'
        '403':
          $ref: '#/responses/trait:error-response:403'
        '404':
          $ref: '#/responses/trait:error-response:404'
      parameters:
        - name: table
          in: query
          description: >-
            Name of the table of a process (suffix) to be queried instead of the
            processes table.
          required: false
          type: string
  '/process/{process_id}':
    get:
      tags:
        - process
        - get
      summary: Get detail of process
      description: >-
        Get detail of process by processId, or a register from a table of a
        process, depending on the existence of query parameters.
      consumes: []
      produces: []
      schemes: []
      security:
        - basic_auth: []
      operationId: controllers.process.read.read
      responses:
        '200':
          schema:
            $ref: '#/definitions/output_process'
          description: Returns 200 with the detail of process for the specified processId
        '203':
          schema:
            $ref: '#/definitions/output_process_register'
          description: >-
            Returns 203 with the detail of a register of a table in the process
            for the specified processId
        '400':
          $ref: '#/responses/trait:error-response:400'
        '401':
          $ref: '#/responses/trait:error-response:401'
        '403':
          $ref: '#/responses/trait:error-response:403'
        '404':
          $ref: '#/responses/trait:error-response:404'
      parameters:
        - name: table
          in: query
          description: >-
            If present indicate the table of the process (suffix) to perform the
            query
          required: false
          type: string
        - name: column
          in: query
          description: If present indicate the column to filter the query
          required: false
          type: string
        - name: value
          in: query
          description: >-
            If present indicate the value used with the column to filter the
            query (returns only the first one)
          required: false
          type: string
        - name: process_id
          in: path
          description: ''
          required: true
          type: string
    put:
      tags:
        - process
        - update
      summary: Update process
      description: >-
        Update process register by processId, or a register in a table of a
        process
      consumes: []
      produces: []
      schemes: []
      security:
        - basic_auth: []
      operationId: controllers.process.update.update
      responses:
        '200':
          schema:
            $ref: '#/definitions/output_process'
          description: Returns 200 with the detail of updated process
        '203':
          schema:
            $ref: '#/definitions/output_process_register'
          description: Returns 203 with the detail of updated process register
        '400':
          $ref: '#/responses/trait:error-response:400'
        '401':
          $ref: '#/responses/trait:error-response:401'
        '403':
          $ref: '#/responses/trait:error-response:403'
        '404':
          $ref: '#/responses/trait:error-response:404'
      parameters:
        - name: process_id
          in: path
          description: ''
          required: true
          type: string
        - name: body
          in: body
          schema:
            $ref: '#/definitions/process_operation'
    delete:
      tags:
        - process
        - delete
      summary: Delete process
      description: >-
        Delete process by processId  or a register in a table of the process by
        a column and value filter
      consumes: []
      produces: []
      schemes: []
      security:
        - basic_auth: []
      operationId: controllers.process.delete.delete
      responses:
        '200':
          schema:
            type: object
          description: Returns 200
        '400':
          $ref: '#/responses/trait:error-response:400'
        '401':
          $ref: '#/responses/trait:error-response:401'
        '403':
          $ref: '#/responses/trait:error-response:403'
        '404':
          $ref: '#/responses/trait:error-response:404'
      parameters:
        - name: table
          in: query
          description: >-
            If present indicate the table of the process (suffix) to perform the
            query
          required: false
          type: string
        - name: reg_id
          in: query
          description: ''
          required: false
          type: integer
        - name: process_id
          in: path
          description: ''
          required: true
          type: string
        - name: body
          in: body
          schema:
            type: object
  /authorizations:
    post:
      tags:
        - authorization
        - create
      summary: Create authorization
      description: Create authorization
      consumes: []
      produces: []
      schemes: []
      security:
        - basic_auth: []
      operationId: controllers.authorization.create
      responses:
        '201':
          schema:
            $ref: '#/definitions/output_authorization'
          description: >-
            Returns response 201 with the details of the newly created
            authorization
        '400':
          $ref: '#/responses/trait:error-response:400'
        '401':
          $ref: '#/responses/trait:error-response:401'
        '403':
          $ref: '#/responses/trait:error-response:403'
        '404':
          $ref: '#/responses/trait:error-response:404'
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/input_authorization'
    get:
      tags:
        - authorization
        - list
      summary: Get list of authorizations
      description: Get list of authorizations
      consumes: []
      produces: []
      schemes: []
      security:
        - basic_auth: []
      operationId: controllers.authorization.read_all
      responses:
        '200':
          schema:
            type: array
            items:
              $ref: '#/definitions/output_authorization'
          description: Returns 200 with list/array of authorizations
        '400':
          $ref: '#/responses/trait:error-response:400'
        '401':
          $ref: '#/responses/trait:error-response:401'
        '403':
          $ref: '#/responses/trait:error-response:403'
        '404':
          $ref: '#/responses/trait:error-response:404'
      parameters: []
  '/authorizations/{authorization_id}':
    get:
      tags:
        - authorization
        - get
      summary: Get detail of authorization by authorization_id
      description: Get detail of authorization by authorizationId
      consumes: []
      produces: []
      schemes: []
      security:
        - basic_auth: []
      operationId: controllers.authorization.read
      responses:
        '200':
          schema:
            $ref: '#/definitions/output_authorization'
          description: >-
            Returns 200 with the detail of authorization for the specified
            authorizationId
        '400':
          $ref: '#/responses/trait:error-response:400'
        '401':
          $ref: '#/responses/trait:error-response:401'
        '403':
          $ref: '#/responses/trait:error-response:403'
        '404':
          $ref: '#/responses/trait:error-response:404'
      parameters:
        - name: authorization_id
          in: path
          description: ''
          required: true
          type: string
    put:
      tags:
        - authorization
        - update
      summary: Update authorization details by authorization_id
      description: Update authorization details by authorization_id
      consumes: []
      produces: []
      schemes: []
      security:
        - basic_auth: []
      operationId: controllers.authorization.update
      responses:
        '200':
          schema:
            $ref: '#/definitions/output_authorization'
          description: Returns 200 with the detail of updated authorization
        '400':
          $ref: '#/responses/trait:error-response:400'
        '401':
          $ref: '#/responses/trait:error-response:401'
        '403':
          $ref: '#/responses/trait:error-response:403'
        '404':
          $ref: '#/responses/trait:error-response:404'
      parameters:
        - name: authorization_id
          in: path
          description: ''
          required: true
          type: string
        - name: body
          in: body
          schema:
            $ref: '#/definitions/input_authorization'
    delete:
      tags:
        - authorization
        - delete
      summary: Delete authorization by authorization_id
      description: Delete authorization by authorization_id
      consumes: []
      produces: []
      schemes: []
      security:
        - basic_auth: []
      operationId: controllers.authorization.delete
      responses:
        '200':
          schema:
            type: object
          description: Returns 200
        '400':
          $ref: '#/responses/trait:error-response:400'
        '401':
          $ref: '#/responses/trait:error-response:401'
        '403':
          $ref: '#/responses/trait:error-response:403'
        '404':
          $ref: '#/responses/trait:error-response:404'
      parameters:
        - name: authorization_id
          in: path
          description: ''
          required: true
          type: string
        - name: body
          in: body
          schema:
            type: object
  /logs:
    post:
      tags:
        - log
        - create
      summary: Create log
      description: Create log
      consumes: []
      produces: []
      schemes: []
      security:
        - basic_auth: []
      operationId: controllers.log.create
      responses:
        '200':
          schema:
            $ref: '#/definitions/output_log'
          description: Returns response 201 with the details of the newly created log
        '400':
          $ref: '#/responses/trait:error-response:400'
        '401':
          $ref: '#/responses/trait:error-response:401'
        '403':
          $ref: '#/responses/trait:error-response:403'
        '404':
          $ref: '#/responses/trait:error-response:404'
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/input_log'
    get:
      tags:
        - log
        - list
      summary: Get list of logs
      description: Get list of logs
      consumes: []
      produces: []
      schemes: []
      security:
        - basic_auth: []
      operationId: controllers.log.read_all
      responses:
        '200':
          schema:
            type: array
            items:
              $ref: '#/definitions/output_log'
          description: Returns 200 with list/array of logs
        '400':
          $ref: '#/responses/trait:error-response:400'
        '401':
          $ref: '#/responses/trait:error-response:401'
        '403':
          $ref: '#/responses/trait:error-response:403'
        '404':
          $ref: '#/responses/trait:error-response:404'
      parameters: []
  '/logs/{log_id}':
    get:
      tags:
        - log
        - get
      summary: Get detail of log by log_id
      description: Get detail of log by log_id
      consumes: []
      produces: []
      schemes: []
      security:
        - basic_auth: []
      operationId: controllers.log.read
      responses:
        '200':
          schema:
            $ref: '#/definitions/output_log'
          description: Returns 200 with the detail of log for the specified logId
        '400':
          $ref: '#/responses/trait:error-response:400'
        '401':
          $ref: '#/responses/trait:error-response:401'
        '403':
          $ref: '#/responses/trait:error-response:403'
        '404':
          $ref: '#/responses/trait:error-response:404'
      parameters:
        - name: log_id
          in: path
          description: ''
          required: true
          type: string
    put:
      tags:
        - log
        - update
      summary: Update log details by log_id
      description: Update log details by log_id
      consumes: []
      produces: []
      schemes: []
      security:
        - basic_auth: []
      operationId: controllers.log.update
      responses:
        '200':
          schema:
            $ref: '#/definitions/output_log'
          description: Returns 200 with the detail of updated log
        '400':
          $ref: '#/responses/trait:error-response:400'
        '401':
          $ref: '#/responses/trait:error-response:401'
        '403':
          $ref: '#/responses/trait:error-response:403'
        '404':
          $ref: '#/responses/trait:error-response:404'
      parameters:
        - name: log_id
          in: path
          description: ''
          required: true
          type: string
        - name: body
          in: body
          schema:
            $ref: '#/definitions/input_log'
    delete:
      tags:
        - log
        - delete
      summary: Delete log by log_id
      description: Delete log by log_id
      consumes: []
      produces: []
      schemes: []
      security:
        - basic_auth: []
      operationId: controllers.log.delete
      responses:
        '200':
          schema:
            type: object
          description: Returns 200
        '400':
          $ref: '#/responses/trait:error-response:400'
        '401':
          $ref: '#/responses/trait:error-response:401'
        '403':
          $ref: '#/responses/trait:error-response:403'
        '404':
          $ref: '#/responses/trait:error-response:404'
      parameters:
        - name: log_id
          in: path
          description: ''
          required: true
          type: string
        - name: body
          in: body
          schema:
            type: object
